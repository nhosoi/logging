---
# Imfile configuration setting
# ----------------------------

# rsyslog_capabilities is an array which takes 'network', 'remote-files', 'tls'
# 'network' enables input and output over network.
# 'remote-files' allows input from remote hosts are separately stored from the local logs.
# 'tls' specifies the input and output could be processed over tls.
#       Note: unles rsyslog_send_over_tls_only is set to true, insecure network connection
#       is also allowed.
rsyslog_capabilities: []
__rsyslog_files_input_packages: []

rsyslog_input_log_path: "/var/log/containers/*.log"
rsyslog_input_log_tag: "container"

# __rsyslog_files_input_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd`` configuration
# in a special format. This list specifies ``rsyslogd`` imfile configuration.
__rsyslog_files_input_rules:
  - '{{ __rsyslog_conf_imfile_modules }}'
  - '{{ __rsyslog_conf_imfile_inputs }}'

# Debops example configuration options
# --------------------------------------------

# __rsyslog_conf_local_modules
#
# List of ``rsyslogd`` modules that enable logs from the local system to be
# received and parsed by the ``rsyslogd`` daemon.
__rsyslog_conf_imfile_modules:

  - name: 'imfile-modules'
    type: 'modules'
    sections:

      - comment: 'Reads log messages from file'
        options: |-
          module(load="imfile" mode="inotify")

__rsyslog_conf_imfile_inputs:

  - name: 'imfile-input'
    type: 'input'
    sections:

      - comment: 'Log messages from log files'
        options: |-
          {% if rsyslog_elasticsearch | d([]) %}
          # FIXME: Need to normalize a log before passing it to elasticsearch output

          {% for element in logs_collections %}
          {% if element.name is defined and element.type == "files" %}
          input(type="imfile" file="{{ element.rsyslog_input_log_path | d(rsyslog_input_log_path) }}" tag="{{ element.rsyslog_input_log_tag | d(rsyslog_input_log_tag) }}" ruleset="try_es")
          {% endif %}
          {% endfor %}

          {% else %}

          {% for element in logs_collections %}
          {% if element.name is defined and element.type == "files" and
             (loop.previtem is not defined or
              (loop.previtem is defined and loop.previtem.type != "files")) %}
          input(type="imfile" file="{{ element.rsyslog_input_log_path | d(rsyslog_input_log_path) }}" tag="{{ element.rsyslog_input_log_tag | d(rsyslog_input_log_tag) }}")
          {% if element.rsyslog_use_files_ruleset | d(false) %}
          call files
          {% endif %}
          {% if element.rsyslog_use_forwards_ruleset | d(false) %}
          call forwards
          {% endif %}
          stop
          {% endif %}
          {% endfor %}

          {% endif %}
